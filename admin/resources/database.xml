<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa" 
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
           http://www.springframework.org/schema/data/jpa   
           http://www.springframework.org/schema/data/jpa/spring-jpa.xsd 
           http://www.springframework.org/schema/aop 
           http://www.springframework.org/schema/aop/spring-aop-3.0.xsd  
           http://www.springframework.org/schema/tx 
           http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

	<!-- DataSource JDBC 配置-->
	<bean name="dataSource" class="org.apache.commons.dbcp2.BasicDataSource"
		  destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="initialSize" value="${jdbc.initialSize}" />
		<property name="maxTotal" value="${jdbc.maxActive}" />
		<property name="maxIdle" value="${jdbc.maxIdle}" />
		<property name="minIdle" value="${jdbc.minIdle}" />
		<property name="maxWaitMillis" value="${jdbc.maxWait}" />
		<property name="poolPreparedStatements" value="true" />
		<property name="defaultAutoCommit" value="true" />
		<property name="testOnBorrow" value="true"/>
		<property name="testWhileIdle" value="true"/>
		<property name="removeAbandonedOnBorrow" value="true"/>
		<property name="validationQuery" value="select 1"/>
	</bean>

	<!--DataSource JDBC 配置完-->

	<!-- 定义实体管理器工厂   LocalContainerEntityManagerFactoryBean这个选项Spring扮演了容器的角色。完全掌管JPA -->
	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<!--用于指定Spring定义的数据源；-->
		<property name="dataSource" ref="dataSource" />
		<property name="persistenceUnitName" value="persistenceUnit"/>
		<!--用于指定JPA配置文件，对于对配置文件情况请选择设置persistenceUnitManager属性来解决；-->
		<property name="persistenceXmlLocation" value="classpath:META-INF/persistence.xml" />
		<!--persistenceProvider用于指定持久化实现厂商类；如Hibernate为org.hibernate.ejb.HibernatePersistence类；-->
		<property name="persistenceProvider">
			<bean class="org.hibernate.ejb.HibernatePersistence"/>
		</property>
		<!--用于设置实现厂商JPA实现的特定属性，如设置Hibernate的是否自动生成DDL的属性generateDdl；
			这些属性是厂商特定的，因此最好在这里设置；
			目前Spring提供HibernateJpaVendorAdapter、等四个实现。
			当指定jpaVendorAdapter属性时可以不指定jpaDialect，会自动设置相应的JpaDialect实现；-->
		<property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
	            <property name="generateDdl" value="false"/>
	            <property name="showSql" value="false"/>
        	</bean>
        </property>
		<!--指定JPA属性-->
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.max_fetch_depth">3</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="hibernate.jdbc.fetch_size">18</prop>
				<prop key="hibernate.jdbc.batch_size">10</prop>
				<prop key="hibernate.show_sql">false</prop>
				<prop key="hibernate.format_sql">false</prop>
				<!-- 启用二级缓存 -->
				<prop key="cache.use_second_level_cache">true</prop>

				<!-- 配置使用的二级缓存的产品 -->
				<!--
				<prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>-->
				<!-- 由于spring也使用了Ehcache, 保证双方都使用同一个缓存管理器 -->
				<prop key="hibernate.cache.region.factory_class">
					org.hibernate.cache.ehcache.SingletonEhCacheRegionFactory
				</prop>
				<!-- 配置启用查询缓存 -->
				<prop key="cache.use_query_cache">true</prop>
			</props>
		</property>
	</bean>

	<!--JPA事务管理器-->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>

	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- Jpa配置, 扫描base-package下所有继承于Repository<T,ID>的接口 -->
	<jpa:repositories base-package="com.libmanagement.repository"
					  entity-manager-factory-ref="entityManagerFactory"
					  transaction-manager-ref="transactionManager"/>


</beans>